
Promini_stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000832  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042d  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000091  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  9e:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setInitialState>:
bool dir = clockWise;
bool move = false;
bool setToZero = true;

void setInitialState() {
	_step_1 = 0;
  a6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_step_1+0x1>
  aa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_step_1>
	rotation = 0;
  ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
  b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
	dir = clockWise;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
	move = false;
  bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  c0:	08 95       	ret

000000c2 <setToZeroPoint>:
}

void setToZeroPoint() {
	dir=antiClockWise;
  c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dir>
	move = true;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	rotation=0;
  cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
  d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
  d4:	08 95       	ret

000000d6 <Stop>:
}

void Stop() {
	move = false;
  d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	PORTB &=~(1<<PB1);
  da:	29 98       	cbi	0x05, 1	; 5
	PORTB &=~(1<<PB0);
  dc:	28 98       	cbi	0x05, 0	; 5
	PORTD &=~(1<<PD7);
  de:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &=~(1<<PD6);
  e0:	5e 98       	cbi	0x0b, 6	; 11
  e2:	08 95       	ret

000000e4 <main>:
}

int main(void)
{
	DDRC = (1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD7)|(1<<DDD6);
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB1)|(1<<DDB0);
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	83 60       	ori	r24, 0x03	; 3
  f0:	84 b9       	out	0x04, r24	; 4
	sei();
  f2:	78 94       	sei
	EICRA |= (1<<ISC00);
  f4:	e9 e6       	ldi	r30, 0x69	; 105
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
	//|(1<<ISC00)
	EIMSK |= (1<<INT0);
  fe:	e8 9a       	sbi	0x1d, 0	; 29
	//|(1<<INT0);
	setToZeroPoint();
 100:	0e 94 61 00 	call	0xc2	; 0xc2 <setToZeroPoint>
					} else {
					rotation--;
					_step_1++;
				}
				if(_step_1 < 0) {
					_step_1 = 3;
 104:	c3 e0       	ldi	r28, 0x03	; 3
 106:	d0 e0       	ldi	r29, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		if(PRESSED_STOP && (dir==antiClockWise)){
			if(setToZero) {
				dir=clockWise;
 108:	11 e0       	ldi	r17, 0x01	; 1
	setToZeroPoint();

    /* Replace with your application code */
    while (1) 
    {
		if(PRESSED_STOP && (dir==antiClockWise)){
 10a:	4d 9b       	sbis	0x09, 5	; 9
 10c:	27 c0       	rjmp	.+78     	; 0x15c <main+0x78>
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
 112:	81 11       	cpse	r24, r1
 114:	23 c0       	rjmp	.+70     	; 0x15c <main+0x78>
			if(setToZero) {
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11a:	88 23       	and	r24, r24
 11c:	d9 f0       	breq	.+54     	; 0x154 <main+0x70>
				dir=clockWise;
 11e:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <dir>
				move = true;
 122:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <__data_end>
				setToZero = false;
 126:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				rotation=0;
 12a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
 12e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
		_step_2++;
		if(_step_2 > 3) {
			_step_2 = 0;
		}*/
			if (move) {
				switch (_step_1){
 132:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_1>
 136:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_1+0x1>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	91 05       	cpc	r25, r1
 13e:	49 f1       	breq	.+82     	; 0x192 <main+0xae>
 140:	1c f4       	brge	.+6      	; 0x148 <main+0x64>
 142:	89 2b       	or	r24, r25
 144:	09 f1       	breq	.+66     	; 0x188 <main+0xa4>
 146:	37 c0       	rjmp	.+110    	; 0x1b6 <main+0xd2>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 05       	cpc	r25, r1
 14c:	39 f1       	breq	.+78     	; 0x19c <main+0xb8>
 14e:	03 97       	sbiw	r24, 0x03	; 3
 150:	51 f1       	breq	.+84     	; 0x1a6 <main+0xc2>
 152:	31 c0       	rjmp	.+98     	; 0x1b6 <main+0xd2>
				dir=clockWise;
				move = true;
				setToZero = false;
				rotation=0;
			} else {
				Stop();
 154:	0e 94 6b 00 	call	0xd6	; 0xd6 <Stop>
				setInitialState();			
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <setInitialState>
		}
		_step_2++;
		if(_step_2 > 3) {
			_step_2 = 0;
		}*/
			if (move) {
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 160:	88 23       	and	r24, r24
 162:	09 f4       	brne	.+2      	; 0x166 <main+0x82>
 164:	63 c0       	rjmp	.+198    	; 0x22c <main+0x148>
				switch (_step_1){
 166:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_1>
 16a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_1+0x1>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 05       	cpc	r25, r1
 172:	79 f0       	breq	.+30     	; 0x192 <main+0xae>
 174:	1c f4       	brge	.+6      	; 0x17c <main+0x98>
 176:	89 2b       	or	r24, r25
 178:	39 f0       	breq	.+14     	; 0x188 <main+0xa4>
 17a:	19 c0       	rjmp	.+50     	; 0x1ae <main+0xca>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	91 05       	cpc	r25, r1
 180:	69 f0       	breq	.+26     	; 0x19c <main+0xb8>
 182:	03 97       	sbiw	r24, 0x03	; 3
 184:	81 f0       	breq	.+32     	; 0x1a6 <main+0xc2>
 186:	13 c0       	rjmp	.+38     	; 0x1ae <main+0xca>
					case 0:
						PORTD |= (1<<PD7);
 188:	5f 9a       	sbi	0x0b, 7	; 11
						PORTD &= ~(1<<PD6);
 18a:	5e 98       	cbi	0x0b, 6	; 11
						PORTB |= (1<<PB0);
 18c:	28 9a       	sbi	0x05, 0	; 5
						PORTB &= ~(1<<PB1);
 18e:	29 98       	cbi	0x05, 1	; 5
						break;
 190:	0e c0       	rjmp	.+28     	; 0x1ae <main+0xca>
						case 1:
						PORTD &= ~(1<<PD7);
 192:	5f 98       	cbi	0x0b, 7	; 11
						PORTD &= ~(1<<PD6);
 194:	5e 98       	cbi	0x0b, 6	; 11
						PORTB |= (1<<PB0);
 196:	28 9a       	sbi	0x05, 0	; 5
						PORTB |= (1<<PB1);
 198:	29 9a       	sbi	0x05, 1	; 5
						break;
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <main+0xca>
						case 2:
						PORTD &= ~(1<<PD7);
 19c:	5f 98       	cbi	0x0b, 7	; 11
						PORTD |= (1<<PD6);
 19e:	5e 9a       	sbi	0x0b, 6	; 11
						PORTB &= ~(1<<PB0);
 1a0:	28 98       	cbi	0x05, 0	; 5
						PORTB |= (1<<PB1);
 1a2:	29 9a       	sbi	0x05, 1	; 5
					break;
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <main+0xca>
					case 3:
						PORTD |= (1<<PD7);
 1a6:	5f 9a       	sbi	0x0b, 7	; 11
						PORTD |= (1<<PD6);
 1a8:	5e 9a       	sbi	0x0b, 6	; 11
						PORTB &= ~(1<<PB0);
 1aa:	28 98       	cbi	0x05, 0	; 5
						PORTB &= ~(1<<PB1);
 1ac:	29 98       	cbi	0x05, 1	; 5
					break;
				}
	
				if(dir) {
 1ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
 1b2:	88 23       	and	r24, r24
 1b4:	c1 f0       	breq	.+48     	; 0x1e6 <main+0x102>
					_step_1--;
 1b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_1>
 1ba:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_1+0x1>
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_step_1+0x1>
 1c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_step_1>
					rotation++;
 1c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotation>
 1cc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotation+0x1>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotation+0x1>
 1d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotation>
					if(rotation > 490) {
 1da:	8b 3e       	cpi	r24, 0xEB	; 235
 1dc:	91 40       	sbci	r25, 0x01	; 1
 1de:	ac f0       	brlt	.+42     	; 0x20a <main+0x126>
						//rotation=0;
						Stop();
 1e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <Stop>
 1e4:	12 c0       	rjmp	.+36     	; 0x20a <main+0x126>
						}
					} else {
					rotation--;
 1e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotation>
 1ea:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotation+0x1>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotation+0x1>
 1f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotation>
					_step_1++;
 1f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_1>
 1fc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_1+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_step_1+0x1>
 206:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_step_1>
				}
				if(_step_1 < 0) {
 20a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_1>
 20e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_1+0x1>
 212:	99 23       	and	r25, r25
 214:	2c f4       	brge	.+10     	; 0x220 <main+0x13c>
					_step_1 = 3;
 216:	d0 93 06 01 	sts	0x0106, r29	; 0x800106 <_step_1+0x1>
 21a:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <_step_1>
 21e:	06 c0       	rjmp	.+12     	; 0x22c <main+0x148>
					} else if (_step_1 > 3) {
 220:	04 97       	sbiw	r24, 0x04	; 4
 222:	24 f0       	brlt	.+8      	; 0x22c <main+0x148>
					_step_1=0;
 224:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_step_1+0x1>
 228:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_step_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	97 e2       	ldi	r25, 0x27	; 39
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x14c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x152>
 236:	00 00       	nop
 238:	68 cf       	rjmp	.-304    	; 0x10a <main+0x26>

0000023a <__vector_1>:

			_delay_ms(2);
    }
}
		
	ISR(INT0_vect) {
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	87 ea       	ldi	r24, 0xA7	; 167
 24a:	91 e6       	ldi	r25, 0x61	; 97
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <__vector_1+0x12>
 250:	00 c0       	rjmp	.+0      	; 0x252 <__vector_1+0x18>
 252:	00 00       	nop
	_delay_ms(5);
		if(CLOCKWISE){
 254:	4a 9b       	sbis	0x09, 2	; 9
 256:	06 c0       	rjmp	.+12     	; 0x264 <__vector_1+0x2a>
			dir=antiClockWise;
 258:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dir>
			//rotation=0;
			move = true;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 262:	05 c0       	rjmp	.+10     	; 0x26e <__vector_1+0x34>
		}
		else {
			dir=clockWise;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
			//rotation=0;
			move = true;
 26a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
	}
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
