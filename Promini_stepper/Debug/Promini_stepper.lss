
Promini_stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000820  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049f  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000091  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  9e:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setInitialState>:
int rotation = 0;
bool dir = clockWise;
bool move = false;

void setInitialState() {
	_step_1 = 0;
  a6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_step_1+0x1>
  aa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_step_1>
	rotation = 0;
  ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
  b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
	dir = clockWise;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	move = false;
  bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  c0:	08 95       	ret

000000c2 <setToZeroPoint>:
}

void setToZeroPoint() {
	dir=clockWise;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	move = true;
  c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	rotation=0;
  cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
  d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
  d4:	08 95       	ret

000000d6 <Stop>:
}

void Stop() {
	move = false;
  d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	PORTB &=~(1<<PB1);
  da:	29 98       	cbi	0x05, 1	; 5
	PORTB &=~(1<<PB0);
  dc:	28 98       	cbi	0x05, 0	; 5
	PORTD &=~(1<<PD7);
  de:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &=~(1<<PD6);
  e0:	5e 98       	cbi	0x0b, 6	; 11
  e2:	08 95       	ret

000000e4 <main>:
}

int main(void)
{
	DDRC = (1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD7)|(1<<DDD6);
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB1)|(1<<DDB0);
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	83 60       	ori	r24, 0x03	; 3
  f0:	84 b9       	out	0x04, r24	; 4
	sei();
  f2:	78 94       	sei
	EICRA |= (1<<ISC00);
  f4:	e9 e6       	ldi	r30, 0x69	; 105
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
	//|(1<<ISC00)|(1<<ISC01);
	EIMSK |= (1<<INT0);
  fe:	e8 9a       	sbi	0x1d, 0	; 29
	//|(1<<INT0);
	setToZeroPoint();
 100:	0e 94 61 00 	call	0xc2	; 0xc2 <setToZeroPoint>
					rotation++;
					} else {
					_step_1++;
				}
				if(_step_1 < 0) {
					_step_1 = 3;
 104:	c3 e0       	ldi	r28, 0x03	; 3
 106:	d0 e0       	ldi	r29, 0x00	; 0
	setToZeroPoint();

    /* Replace with your application code */
    while (1) 
    {
		if(PRESSED_STOP && (dir==antiClockWise)){
 108:	4d 9b       	sbis	0x09, 5	; 9
 10a:	08 c0       	rjmp	.+16     	; 0x11c <main+0x38>
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 110:	81 11       	cpse	r24, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x38>
			Stop();
 114:	0e 94 6b 00 	call	0xd6	; 0xd6 <Stop>
			setInitialState();
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <setInitialState>
		}

		switch (_step_2)
 11c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_2>
 120:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_2+0x1>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	91 05       	cpc	r25, r1
 128:	79 f0       	breq	.+30     	; 0x148 <main+0x64>
 12a:	1c f4       	brge	.+6      	; 0x132 <main+0x4e>
 12c:	89 2b       	or	r24, r25
 12e:	39 f0       	breq	.+14     	; 0x13e <main+0x5a>
 130:	19 c0       	rjmp	.+50     	; 0x164 <main+0x80>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	91 05       	cpc	r25, r1
 136:	69 f0       	breq	.+26     	; 0x152 <main+0x6e>
 138:	03 97       	sbiw	r24, 0x03	; 3
 13a:	81 f0       	breq	.+32     	; 0x15c <main+0x78>
 13c:	13 c0       	rjmp	.+38     	; 0x164 <main+0x80>
		{
			case 0:
				PORTC |= (1<<PC3);
 13e:	43 9a       	sbi	0x08, 3	; 8
				PORTC |= (1<<PC2);
 140:	42 9a       	sbi	0x08, 2	; 8
				PORTC &= ~(1<<PC1);
 142:	41 98       	cbi	0x08, 1	; 8
				PORTC &= ~(1<<PC0);
 144:	40 98       	cbi	0x08, 0	; 8
			break;
 146:	0e c0       	rjmp	.+28     	; 0x164 <main+0x80>
			case 1:
				PORTC &= ~(1<<PC3);
 148:	43 98       	cbi	0x08, 3	; 8
				PORTC |= (1<<PC2);
 14a:	42 9a       	sbi	0x08, 2	; 8
				PORTC |= (1<<PC1);
 14c:	41 9a       	sbi	0x08, 1	; 8
				PORTC &= ~(1<<PC0);
 14e:	40 98       	cbi	0x08, 0	; 8
			break;
 150:	09 c0       	rjmp	.+18     	; 0x164 <main+0x80>
			case 2:
				PORTC &= ~(1<<PC3);
 152:	43 98       	cbi	0x08, 3	; 8
				PORTC &= ~(1<<PC2);
 154:	42 98       	cbi	0x08, 2	; 8
				PORTC |= (1<<PC1);
 156:	41 9a       	sbi	0x08, 1	; 8
				PORTC |= (1<<PC0);
 158:	40 9a       	sbi	0x08, 0	; 8
			break;
 15a:	04 c0       	rjmp	.+8      	; 0x164 <main+0x80>
			case 3:
				PORTC |= (1<<PC3);
 15c:	43 9a       	sbi	0x08, 3	; 8
				PORTC &= ~(1<<PC2);
 15e:	42 98       	cbi	0x08, 2	; 8
				PORTC &= ~(1<<PC1);
 160:	41 98       	cbi	0x08, 1	; 8
				PORTC |= (1<<PC0);
 162:	40 9a       	sbi	0x08, 0	; 8
			break;
		}
			if (move) {
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 168:	88 23       	and	r24, r24
 16a:	09 f4       	brne	.+2      	; 0x16e <main+0x8a>
 16c:	62 c0       	rjmp	.+196    	; 0x232 <main+0x14e>
				switch (_step_1){
 16e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_step_1>
 172:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_step_1+0x1>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	91 05       	cpc	r25, r1
 17a:	79 f0       	breq	.+30     	; 0x19a <main+0xb6>
 17c:	1c f4       	brge	.+6      	; 0x184 <main+0xa0>
 17e:	89 2b       	or	r24, r25
 180:	39 f0       	breq	.+14     	; 0x190 <main+0xac>
 182:	19 c0       	rjmp	.+50     	; 0x1b6 <main+0xd2>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	91 05       	cpc	r25, r1
 188:	69 f0       	breq	.+26     	; 0x1a4 <main+0xc0>
 18a:	03 97       	sbiw	r24, 0x03	; 3
 18c:	81 f0       	breq	.+32     	; 0x1ae <main+0xca>
 18e:	13 c0       	rjmp	.+38     	; 0x1b6 <main+0xd2>
					case 0:
						PORTD |= (1<<PD7);
 190:	5f 9a       	sbi	0x0b, 7	; 11
						PORTD &= ~(1<<PD6);
 192:	5e 98       	cbi	0x0b, 6	; 11
						PORTB |= (1<<PB0);
 194:	28 9a       	sbi	0x05, 0	; 5
						PORTB &= ~(1<<PB1);
 196:	29 98       	cbi	0x05, 1	; 5
						break;
 198:	0e c0       	rjmp	.+28     	; 0x1b6 <main+0xd2>
						case 1:
						PORTD &= ~(1<<PD7);
 19a:	5f 98       	cbi	0x0b, 7	; 11
						PORTD &= ~(1<<PD6);
 19c:	5e 98       	cbi	0x0b, 6	; 11
						PORTB |= (1<<PB0);
 19e:	28 9a       	sbi	0x05, 0	; 5
						PORTB |= (1<<PB1);
 1a0:	29 9a       	sbi	0x05, 1	; 5
						break;
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <main+0xd2>
						case 2:
						PORTD &= ~(1<<PD7);
 1a4:	5f 98       	cbi	0x0b, 7	; 11
						PORTD |= (1<<PD6);
 1a6:	5e 9a       	sbi	0x0b, 6	; 11
						PORTB &= ~(1<<PB0);
 1a8:	28 98       	cbi	0x05, 0	; 5
						PORTB |= (1<<PB1);
 1aa:	29 9a       	sbi	0x05, 1	; 5
					break;
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <main+0xd2>
					case 3:
						PORTD |= (1<<PD7);
 1ae:	5f 9a       	sbi	0x0b, 7	; 11
						PORTD |= (1<<PD6);
 1b0:	5e 9a       	sbi	0x0b, 6	; 11
						PORTB &= ~(1<<PB0);
 1b2:	28 98       	cbi	0x05, 0	; 5
						PORTB &= ~(1<<PB1);
 1b4:	29 98       	cbi	0x05, 1	; 5
					break;
				}
	
				if(dir) {
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ba:	88 23       	and	r24, r24
 1bc:	99 f0       	breq	.+38     	; 0x1e4 <main+0x100>
					_step_1--;
 1be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_step_1>
 1c2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_step_1+0x1>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_step_1+0x1>
 1cc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_step_1>
					rotation++;
 1d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotation>
 1d4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotation+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotation+0x1>
 1de:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotation>
 1e2:	09 c0       	rjmp	.+18     	; 0x1f6 <main+0x112>
					} else {
					_step_1++;
 1e4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_step_1>
 1e8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_step_1+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_step_1+0x1>
 1f2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_step_1>
				}
				if(_step_1 < 0) {
 1f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_step_1>
 1fa:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_step_1+0x1>
 1fe:	99 23       	and	r25, r25
 200:	2c f4       	brge	.+10     	; 0x20c <main+0x128>
					_step_1 = 3;
 202:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <_step_1+0x1>
 206:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <_step_1>
 20a:	06 c0       	rjmp	.+12     	; 0x218 <main+0x134>
					} else if (_step_1 > 3) {
 20c:	04 97       	sbiw	r24, 0x04	; 4
 20e:	24 f0       	brlt	.+8      	; 0x218 <main+0x134>
					_step_1=0;
 210:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_step_1+0x1>
 214:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_step_1>
				}
				if(rotation > 530) {
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotation>
 21c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotation+0x1>
 220:	83 31       	cpi	r24, 0x13	; 19
 222:	92 40       	sbci	r25, 0x02	; 2
 224:	34 f0       	brlt	.+12     	; 0x232 <main+0x14e>
					rotation=0;
 226:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
 22a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
					Stop();
 22e:	0e 94 6b 00 	call	0xd6	; 0xd6 <Stop>
				}
			}
			_step_2++;
 232:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_step_2>
 236:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_step_2+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
			if(_step_2 > 3) {
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	91 05       	cpc	r25, r1
 240:	2c f4       	brge	.+10     	; 0x24c <main+0x168>
				if(rotation > 530) {
					rotation=0;
					Stop();
				}
			}
			_step_2++;
 242:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_step_2+0x1>
 246:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_step_2>
 24a:	04 c0       	rjmp	.+8      	; 0x254 <main+0x170>
			if(_step_2 > 3) {
				_step_2 = 0;
 24c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_step_2+0x1>
 250:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_step_2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	8f e0       	ldi	r24, 0x0F	; 15
 256:	97 e2       	ldi	r25, 0x27	; 39
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x174>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x17a>
 25e:	00 00       	nop
 260:	53 cf       	rjmp	.-346    	; 0x108 <main+0x24>

00000262 <__vector_1>:
			}
			_delay_ms(2);
    }
}
		
	ISR(INT0_vect) {
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	87 ea       	ldi	r24, 0xA7	; 167
 272:	91 e6       	ldi	r25, 0x61	; 97
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <__vector_1+0x12>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__vector_1+0x18>
 27a:	00 00       	nop
	_delay_ms(5);
		if(CLOCKWISE){
 27c:	4a 9b       	sbis	0x09, 2	; 9
 27e:	0a c0       	rjmp	.+20     	; 0x294 <__vector_1+0x32>
			dir=antiClockWise;
 280:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			rotation=0;
 284:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
 288:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
			move = true;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <__vector_1+0x44>
		}
		else {
			dir=clockWise;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			rotation=0;
 29a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotation+0x1>
 29e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation>
			move = true;
 2a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
	}
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
