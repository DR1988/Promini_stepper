
Promini_stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000820  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049f  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000091  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setInitialState>:
int rotation = 0;
bool dir = clockWise;
bool move = false;

void setInitialState() {
	_step_1 = 0;
  90:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_step_1+0x1>
  94:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_step_1>
	rotation = 0;
  98:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation+0x1>
  9c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotation>
	dir = clockWise;
  a0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dir>
	move = false;
  a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  a8:	08 95       	ret

000000aa <setToZeroPoint>:
}

void setToZeroPoint() {
	dir=clockWise;
  aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dir>
	move = true;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	rotation=0;
  b4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation+0x1>
  b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotation>
  bc:	08 95       	ret

000000be <Stop>:
}

void Stop() {
	move = false;
  be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PORTB &=~(1<<PB1);
  c2:	29 98       	cbi	0x05, 1	; 5
	PORTB &=~(1<<PB0);
  c4:	28 98       	cbi	0x05, 0	; 5
	PORTD &=~(1<<PD7);
  c6:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &=~(1<<PD6);
  c8:	5e 98       	cbi	0x0b, 6	; 11
  ca:	08 95       	ret

000000cc <main>:
}

int main(void)
{
	DDRC = (1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD7)|(1<<DDD6);
  d0:	80 ec       	ldi	r24, 0xC0	; 192
  d2:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB1)|(1<<DDB0);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	84 b9       	out	0x04, r24	; 4
	sei();
  da:	78 94       	sei
	EICRA |= (1<<ISC10);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
	//|(1<<ISC00)|(1<<ISC01);
	EIMSK |= (1<<INT1);
  e6:	e9 9a       	sbi	0x1d, 1	; 29
	//|(1<<INT0);
	setToZeroPoint();
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <setToZeroPoint>
					_step_1--;
				}
				if(_step_1 > 3) {
					_step_1 = 0;
					} else if (_step_1 < 0) {
					_step_1=3;
  ec:	c3 e0       	ldi	r28, 0x03	; 3
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	setToZeroPoint();

    /* Replace with your application code */
    while (1) 
    {
		if(PRESSED_STOP && (dir==clockWise)){
  f0:	4a 9b       	sbis	0x09, 2	; 9
  f2:	08 c0       	rjmp	.+16     	; 0x104 <main+0x38>
  f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
  f8:	81 11       	cpse	r24, r1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <main+0x38>
			Stop();
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <Stop>
			setInitialState();
 100:	0e 94 48 00 	call	0x90	; 0x90 <setInitialState>
		}

		switch (_step_2)
 104:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_step_2>
 108:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_step_2+0x1>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	79 f0       	breq	.+30     	; 0x130 <main+0x64>
 112:	1c f4       	brge	.+6      	; 0x11a <main+0x4e>
 114:	89 2b       	or	r24, r25
 116:	39 f0       	breq	.+14     	; 0x126 <main+0x5a>
 118:	19 c0       	rjmp	.+50     	; 0x14c <main+0x80>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	91 05       	cpc	r25, r1
 11e:	69 f0       	breq	.+26     	; 0x13a <main+0x6e>
 120:	03 97       	sbiw	r24, 0x03	; 3
 122:	81 f0       	breq	.+32     	; 0x144 <main+0x78>
 124:	13 c0       	rjmp	.+38     	; 0x14c <main+0x80>
		{
			case 0:
				PORTC |= (1<<PC3);
 126:	43 9a       	sbi	0x08, 3	; 8
				PORTC |= (1<<PC2);
 128:	42 9a       	sbi	0x08, 2	; 8
				PORTC &= ~(1<<PC1);
 12a:	41 98       	cbi	0x08, 1	; 8
				PORTC &= ~(1<<PC0);
 12c:	40 98       	cbi	0x08, 0	; 8
			break;
 12e:	0e c0       	rjmp	.+28     	; 0x14c <main+0x80>
			case 1:
				PORTC &= ~(1<<PC3);
 130:	43 98       	cbi	0x08, 3	; 8
				PORTC |= (1<<PC2);
 132:	42 9a       	sbi	0x08, 2	; 8
				PORTC |= (1<<PC1);
 134:	41 9a       	sbi	0x08, 1	; 8
				PORTC &= ~(1<<PC0);
 136:	40 98       	cbi	0x08, 0	; 8
			break;
 138:	09 c0       	rjmp	.+18     	; 0x14c <main+0x80>
			case 2:
				PORTC &= ~(1<<PC3);
 13a:	43 98       	cbi	0x08, 3	; 8
				PORTC &= ~(1<<PC2);
 13c:	42 98       	cbi	0x08, 2	; 8
				PORTC |= (1<<PC1);
 13e:	41 9a       	sbi	0x08, 1	; 8
				PORTC |= (1<<PC0);
 140:	40 9a       	sbi	0x08, 0	; 8
			break;
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0x80>
			case 3:
				PORTC |= (1<<PC3);
 144:	43 9a       	sbi	0x08, 3	; 8
				PORTC &= ~(1<<PC2);
 146:	42 98       	cbi	0x08, 2	; 8
				PORTC &= ~(1<<PC1);
 148:	41 98       	cbi	0x08, 1	; 8
				PORTC |= (1<<PC0);
 14a:	40 9a       	sbi	0x08, 0	; 8
			break;
		}
			if (move) {
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 150:	88 23       	and	r24, r24
 152:	09 f4       	brne	.+2      	; 0x156 <main+0x8a>
 154:	63 c0       	rjmp	.+198    	; 0x21c <main+0x150>
				switch (_step_1){
 156:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_step_1>
 15a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_step_1+0x1>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 05       	cpc	r25, r1
 162:	79 f0       	breq	.+30     	; 0x182 <main+0xb6>
 164:	1c f4       	brge	.+6      	; 0x16c <main+0xa0>
 166:	89 2b       	or	r24, r25
 168:	39 f0       	breq	.+14     	; 0x178 <main+0xac>
 16a:	19 c0       	rjmp	.+50     	; 0x19e <main+0xd2>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	91 05       	cpc	r25, r1
 170:	69 f0       	breq	.+26     	; 0x18c <main+0xc0>
 172:	03 97       	sbiw	r24, 0x03	; 3
 174:	81 f0       	breq	.+32     	; 0x196 <main+0xca>
 176:	13 c0       	rjmp	.+38     	; 0x19e <main+0xd2>
					case 0:
						PORTD |= (1<<PD7);
 178:	5f 9a       	sbi	0x0b, 7	; 11
						PORTD &= ~(1<<PD6);
 17a:	5e 98       	cbi	0x0b, 6	; 11
						PORTB |= (1<<PB0);
 17c:	28 9a       	sbi	0x05, 0	; 5
						PORTB &= ~(1<<PB1);
 17e:	29 98       	cbi	0x05, 1	; 5
						break;
 180:	0e c0       	rjmp	.+28     	; 0x19e <main+0xd2>
						case 1:
						PORTD &= ~(1<<PD7);
 182:	5f 98       	cbi	0x0b, 7	; 11
						PORTD &= ~(1<<PD6);
 184:	5e 98       	cbi	0x0b, 6	; 11
						PORTB |= (1<<PB0);
 186:	28 9a       	sbi	0x05, 0	; 5
						PORTB |= (1<<PB1);
 188:	29 9a       	sbi	0x05, 1	; 5
						break;
 18a:	09 c0       	rjmp	.+18     	; 0x19e <main+0xd2>
						case 2:
						PORTD &= ~(1<<PD7);
 18c:	5f 98       	cbi	0x0b, 7	; 11
						PORTD |= (1<<PD6);
 18e:	5e 9a       	sbi	0x0b, 6	; 11
						PORTB &= ~(1<<PB0);
 190:	28 98       	cbi	0x05, 0	; 5
						PORTB |= (1<<PB1);
 192:	29 9a       	sbi	0x05, 1	; 5
					break;
 194:	04 c0       	rjmp	.+8      	; 0x19e <main+0xd2>
					case 3:
						PORTD |= (1<<PD7);
 196:	5f 9a       	sbi	0x0b, 7	; 11
						PORTD |= (1<<PD6);
 198:	5e 9a       	sbi	0x0b, 6	; 11
						PORTB &= ~(1<<PB0);
 19a:	28 98       	cbi	0x05, 0	; 5
						PORTB &= ~(1<<PB1);
 19c:	29 98       	cbi	0x05, 1	; 5
					break;
				}
	
				if(dir) {
 19e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dir>
 1a2:	88 23       	and	r24, r24
 1a4:	99 f0       	breq	.+38     	; 0x1cc <main+0x100>
					_step_1++;
 1a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_step_1>
 1aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_step_1+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_step_1+0x1>
 1b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_step_1>
					rotation++;
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rotation>
 1bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rotation+0x1>
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rotation+0x1>
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rotation>
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <main+0x112>
					} else {
					_step_1--;
 1cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_step_1>
 1d0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_step_1+0x1>
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_step_1+0x1>
 1da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_step_1>
				}
				if(_step_1 > 3) {
 1de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_step_1>
 1e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_step_1+0x1>
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	91 05       	cpc	r25, r1
 1ea:	2c f0       	brlt	.+10     	; 0x1f6 <main+0x12a>
					_step_1 = 0;
 1ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_step_1+0x1>
 1f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_step_1>
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <main+0x136>
					} else if (_step_1 < 0) {
 1f6:	99 23       	and	r25, r25
 1f8:	24 f4       	brge	.+8      	; 0x202 <main+0x136>
					_step_1=3;
 1fa:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <_step_1+0x1>
 1fe:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <_step_1>
				}
				if(rotation > 530) {
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rotation>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rotation+0x1>
 20a:	83 31       	cpi	r24, 0x13	; 19
 20c:	92 40       	sbci	r25, 0x02	; 2
 20e:	34 f0       	brlt	.+12     	; 0x21c <main+0x150>
					rotation=0;
 210:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation+0x1>
 214:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotation>
					Stop();
 218:	0e 94 5f 00 	call	0xbe	; 0xbe <Stop>
				}
			}
			_step_2++;
 21c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_step_2>
 220:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_step_2+0x1>
 224:	01 96       	adiw	r24, 0x01	; 1
			if(_step_2 > 3) {
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	91 05       	cpc	r25, r1
 22a:	2c f4       	brge	.+10     	; 0x236 <main+0x16a>
				if(rotation > 530) {
					rotation=0;
					Stop();
				}
			}
			_step_2++;
 22c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_step_2+0x1>
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_step_2>
 234:	04 c0       	rjmp	.+8      	; 0x23e <main+0x172>
			if(_step_2 > 3) {
				_step_2 = 0;
 236:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_step_2+0x1>
 23a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_step_2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	97 e2       	ldi	r25, 0x27	; 39
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x176>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x17c>
 248:	00 00       	nop
 24a:	52 cf       	rjmp	.-348    	; 0xf0 <main+0x24>

0000024c <__vector_2>:
			}
			_delay_ms(2);
    }
}
		
	ISR(INT1_vect) {
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	87 ea       	ldi	r24, 0xA7	; 167
 25c:	91 e6       	ldi	r25, 0x61	; 97
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <__vector_2+0x12>
 262:	00 c0       	rjmp	.+0      	; 0x264 <__vector_2+0x18>
 264:	00 00       	nop
	_delay_ms(5);
		if(CLOCKWISE){
 266:	4b 9b       	sbis	0x09, 3	; 9
 268:	0a c0       	rjmp	.+20     	; 0x27e <__vector_2+0x32>
			dir=antiClockWise;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dir>
			rotation=0;
 270:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation+0x1>
 274:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotation>
			move = true;
 278:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 27c:	09 c0       	rjmp	.+18     	; 0x290 <__vector_2+0x44>
		}
		else {
			dir=clockWise;
 27e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <dir>
			rotation=0;
 282:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotation+0x1>
 286:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotation>
			move = true;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
